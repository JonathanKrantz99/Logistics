// <auto-generated />
using System;
using Logistics.Infrastructure.Db;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Logistics.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Logistics.Domain.Products.Product", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            Id = new Guid("8e87285a-a19b-4198-a3de-e808e75c64af"),
                            Name = "Keyboard",
                            Removed = false
                        },
                        new
                        {
                            Id = new Guid("1d9e6531-357a-46cf-8e25-97d87b6f4efa"),
                            Name = "Headset",
                            Removed = false
                        },
                        new
                        {
                            Id = new Guid("69daaf92-54b1-432d-a90e-5d8d20f86d44"),
                            Name = "Monitor",
                            Removed = false
                        });
                });

            modelBuilder.Entity("Logistics.Domain.Products.ProductSupplier", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("SupplierId");

                    b.ToTable("ProductSupplier");

                    b.HasData(
                        new
                        {
                            Id = new Guid("01435be9-eb2c-4dde-94f6-1e90eb3f4190"),
                            ProductId = new Guid("8e87285a-a19b-4198-a3de-e808e75c64af"),
                            SupplierId = new Guid("9386a7d2-498f-4c61-997d-f251e785c69c")
                        },
                        new
                        {
                            Id = new Guid("4df454cd-ba22-4beb-b00d-7f448b2a33cb"),
                            ProductId = new Guid("1d9e6531-357a-46cf-8e25-97d87b6f4efa"),
                            SupplierId = new Guid("9386a7d2-498f-4c61-997d-f251e785c69c")
                        },
                        new
                        {
                            Id = new Guid("6980d6d6-e0df-4726-a6d0-229b966a5572"),
                            ProductId = new Guid("69daaf92-54b1-432d-a90e-5d8d20f86d44"),
                            SupplierId = new Guid("5ebadc88-b0bc-4178-a5e8-d3b5faad8e3a")
                        });
                });

            modelBuilder.Entity("Logistics.Domain.Suppliers.Supplier", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Supplier");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9386a7d2-498f-4c61-997d-f251e785c69c"),
                            Name = "Supplier 1",
                            Removed = false
                        },
                        new
                        {
                            Id = new Guid("5ebadc88-b0bc-4178-a5e8-d3b5faad8e3a"),
                            Name = "Supplier 2",
                            Removed = false
                        });
                });

            modelBuilder.Entity("Logistics.Domain.Warehouses.History", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SourceWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("TargetWarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SourceWarehouseId");

                    b.HasIndex("TargetWarehouseId");

                    b.ToTable("History");
                });

            modelBuilder.Entity("Logistics.Domain.Warehouses.StockItem", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ProductId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid>("SupplierId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("WarehouseId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProductId");

                    b.HasIndex("WarehouseId");

                    b.ToTable("StockItem");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9bb136af-1d61-4858-a002-da47994c6f2c"),
                            ProductId = new Guid("8e87285a-a19b-4198-a3de-e808e75c64af"),
                            Quantity = 40,
                            SupplierId = new Guid("9386a7d2-498f-4c61-997d-f251e785c69c"),
                            WarehouseId = new Guid("d1d38bdf-ce2f-4f77-adf5-5d0773bb115e")
                        },
                        new
                        {
                            Id = new Guid("663e29e9-4dc3-40e4-9f46-8708389eb30c"),
                            ProductId = new Guid("1d9e6531-357a-46cf-8e25-97d87b6f4efa"),
                            Quantity = 50,
                            SupplierId = new Guid("9386a7d2-498f-4c61-997d-f251e785c69c"),
                            WarehouseId = new Guid("d1d38bdf-ce2f-4f77-adf5-5d0773bb115e")
                        },
                        new
                        {
                            Id = new Guid("80629c52-a617-4322-a754-14dc72f508d6"),
                            ProductId = new Guid("69daaf92-54b1-432d-a90e-5d8d20f86d44"),
                            Quantity = 200,
                            SupplierId = new Guid("5ebadc88-b0bc-4178-a5e8-d3b5faad8e3a"),
                            WarehouseId = new Guid("d15e3230-949f-4739-963b-98d27d34f4d2")
                        });
                });

            modelBuilder.Entity("Logistics.Domain.Warehouses.Warehouse", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("Removed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Warehouse");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d1d38bdf-ce2f-4f77-adf5-5d0773bb115e"),
                            Name = "Warehouse 1",
                            Removed = false
                        },
                        new
                        {
                            Id = new Guid("d15e3230-949f-4739-963b-98d27d34f4d2"),
                            Name = "Warehouse 2",
                            Removed = false
                        });
                });

            modelBuilder.Entity("Logistics.Domain.Products.ProductSupplier", b =>
                {
                    b.HasOne("Logistics.Domain.Products.Product", null)
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Domain.Suppliers.Supplier", null)
                        .WithMany("ProductSuppliers")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Domain.Warehouses.History", b =>
                {
                    b.HasOne("Logistics.Domain.Warehouses.Warehouse", null)
                        .WithMany("HistoryMoved")
                        .HasForeignKey("SourceWarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Logistics.Domain.Warehouses.Warehouse", null)
                        .WithMany("HistoryRecieved")
                        .HasForeignKey("TargetWarehouseId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Domain.Warehouses.StockItem", b =>
                {
                    b.HasOne("Logistics.Domain.Products.Product", null)
                        .WithMany("StockItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Logistics.Domain.Warehouses.Warehouse", null)
                        .WithMany("StockItems")
                        .HasForeignKey("WarehouseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Domain.Warehouses.Warehouse", b =>
                {
                    b.OwnsOne("Logistics.Domain.Warehouses.Address", "Address", b1 =>
                        {
                            b1.Property<Guid>("WarehouseId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("City")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("PostalCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("Street")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("StreetNumber")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("WarehouseId");

                            b1.ToTable("Warehouse");

                            b1.WithOwner()
                                .HasForeignKey("WarehouseId");

                            b1.HasData(
                                new
                                {
                                    WarehouseId = new Guid("d1d38bdf-ce2f-4f77-adf5-5d0773bb115e"),
                                    City = "Varberg",
                                    PostalCode = "43241",
                                    Street = "Norrgatan",
                                    StreetNumber = "13"
                                },
                                new
                                {
                                    WarehouseId = new Guid("d15e3230-949f-4739-963b-98d27d34f4d2"),
                                    City = "Falkenberg",
                                    PostalCode = "31173",
                                    Street = "Södergatan",
                                    StreetNumber = "18"
                                });
                        });

                    b.Navigation("Address")
                        .IsRequired();
                });

            modelBuilder.Entity("Logistics.Domain.Products.Product", b =>
                {
                    b.Navigation("ProductSuppliers");

                    b.Navigation("StockItems");
                });

            modelBuilder.Entity("Logistics.Domain.Suppliers.Supplier", b =>
                {
                    b.Navigation("ProductSuppliers");
                });

            modelBuilder.Entity("Logistics.Domain.Warehouses.Warehouse", b =>
                {
                    b.Navigation("HistoryMoved");

                    b.Navigation("HistoryRecieved");

                    b.Navigation("StockItems");
                });
#pragma warning restore 612, 618
        }
    }
}
